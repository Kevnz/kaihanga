{"version":3,"sources":["components/logo.jsx","App.js","registerServiceWorker.js","index.js"],"names":["Logo","react_default","a","createElement","className","Component","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modelName","properties","genString","handleInputChange","bind","assertThisInitialized","handleModelChange","addProperty","getString","event","target","value","type","checked","name","setState","defineProperty","slice","push","to","capital","_this2","console","log","input","attrs","keys","map","k","concat","inputTypes","join","_this3","_ref","index","key","defaultValue","ref","Helmet","charSet","rel","href","components_logo","onChange","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c2856c59.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './logo.css';\n\nclass Logo extends Component {\n  render() {\n    return (\n      <div className=\"logo-box\">\n        <div className=\"logo-show\" />\n      </div>\n    );\n  }\n}\n\nexport default Logo;\n","import \"./App.css\";\n\nimport React, { Component } from \"react\";\n\nimport { Helmet } from \"react-helmet\";\nimport Logo from \"./components/logo\";\nimport to from \"to-case\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modelName: \"\",\n      properties: [],\n      genString: \"\"\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleModelChange = this.handleModelChange.bind(this);\n    this.addProperty = this.addProperty.bind(this);\n    this.getString = this.getString.bind(this);\n  }\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n  addProperty() {\n    const props = this.state.properties.slice(0);\n    props.push({ name: \"\", type: \"\" });\n    this.setState({\n      properties: props\n    });\n  }\n  handleModelChange(event) {\n    this.setState({\n      modelName: to.capital(event.target.value)\n    });\n  }\n  getString() {\n    console.log(\"the inputs\", this.input);\n    const inputs = Object.keys(this.input);\n\n    const attrs = inputs.map(\n      k => `${this.input[k].value}:${this.inputTypes[k].value}`\n    );\n    this.setState({\n      genString: `-- ${this.state.modelName} --attributes ${attrs.join(\",\")}`\n    });\n  }\n  render() {\n    if (!this.input) {\n      this.input = {};\n    }\n    if (!this.inputTypes) {\n      this.inputTypes = {};\n    }\n    const properties = this.state.properties.map(({ name, type }, index) => (\n      <div key={`property-row-${index}`}>\n        <input\n          type=\"text\"\n          defaultValue=\"name\"\n          ref={input => (this.input[index] = input)}\n        />{\" \"}\n        -\n        <select ref={input => (this.inputTypes[index] = input)}>\n          <option>string</option>\n          <option>integer</option>\n          <option>bigint</option>\n          <option>date</option>\n          <option>dateonly</option>\n          <option>boolean</option>\n          <option>json</option>\n          <option>jsonb</option>\n          <option>uuid</option>\n        </select>\n      </div>\n    ));\n    return (\n      <div className=\"App\">\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <title>\n            Kaihanga - (noun) maker, builder, creator, architect, producer,\n            drafter.\n          </title>\n          <link rel=\"canonical\" href=\"http://mysite.com/example\" />\n        </Helmet>\n        <header className=\"App-header\">\n          <Logo />\n          <h1 className=\"App-title\">Kaihanga</h1>\n        </header>\n        <p className=\"App-intro\">Enter a model name to begin.</p>\n        <input\n          name=\"modelName\"\n          type=\"text\"\n          value={this.state.modelName}\n          onChange={this.handleModelChange}\n        />\n        <div>\n          <h3>{this.state.modelName}</h3>\n          <div>\n            {properties}\n            <div onClick={this.addProperty} className=\"button\">\n              Add A Property\n            </div>\n          </div>\n          <div onClick={this.getString} className=\"button\">\n            {\" \"}\n            Generate String\n          </div>\n        </div>\n        <div>{this.state.genString}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}